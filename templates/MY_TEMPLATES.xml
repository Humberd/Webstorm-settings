<templateSet group="MY_TEMPLATES">
  <template name="log" value="console.log($code$);" description="console.log()" toReformat="false" toShortenFQNames="true">
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="iife" value="(function () {&#10;    "use strict";&#10;    &#10;    $code$&#10;})();" description="Immediately Invoked Function Expression" toReformat="false" toShortenFQNames="true">
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="warn" value="console.warn($code$);" description="console.warn()" toReformat="false" toShortenFQNames="true">
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="error" value="console.error($code$);" description="console.error()" toReformat="false" toShortenFQNames="true">
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="info" value="console.info($code$);" description="console.info()" toReformat="false" toShortenFQNames="true">
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="dir" value="console.dir($code$);" description="console.dir()" toReformat="false" toShortenFQNames="true">
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="pl" value="println($CONTENT$)" description="println() in Kotlin" toReformat="false" toShortenFQNames="true">
    <variable name="CONTENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="rrcc" value="import React, { PropTypes } from 'react';&#10;import { connect } from &quot;react-redux&quot;;&#10;import { bindActionCreators } from &quot;redux&quot;;&#10;&#10;class $NAME$ extends React.Component {&#10;  constructor(props, context) {&#10;    super(props, context);&#10;  }&#10;&#10;  render() {&#10;    return (&#10;    );&#10;  }&#10;}&#10;&#10;$NAME$.propTypes = {&#10;};&#10;&#10;&#10;function mapStateToProps(state, ownProps) {&#10;  return {&#10;    $STATE_PROPS$&#10;  };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    actions: bindActionCreators($ACTIONS$, dispatch)&#10;  };&#10;}&#10;&#10;export default connect(&#10;  mapStateToProps,&#10;  mapDispatchToProps&#10;)($NAME$);" description="react redux component class" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="STATE_PROPS" expression="" defaultValue="state: state" alwaysStopAt="true" />
    <variable name="ACTIONS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="col" value="companion object: KLogging()" description="companion object logger" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="pvl" value="private var logger = KLogging().logger()" description="private var logger" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>
